# Generated by Django 4.2.3 on 2023-08-15 10:30

import core.models
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CommentsSentimentanalysis",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("comment_id", models.CharField(max_length=255)),
                ("comment", models.TextField(blank=True, null=True)),
                ("sentiment", models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                "db_table": "Comments_SentimentAnalysis",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Monthlystats",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("date", models.CharField(max_length=255)),
                (
                    "channel_subs",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "overall_views",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "MonthlyStats",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Scaninfo",
            fields=[
                ("scan_id", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "channel_id",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("phase", models.CharField(max_length=255)),
                ("start_time", models.CharField(blank=True, max_length=255, null=True)),
                ("end_time", models.CharField(blank=True, max_length=255, null=True)),
                ("success", models.IntegerField(blank=True, null=True)),
                ("notes", models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                "db_table": "ScanInfo",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VideoRankings",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("keyword", models.CharField(max_length=255)),
                (
                    "results_vidid",
                    models.CharField(db_column="results_vidID", max_length=255),
                ),
                (
                    "results_vidurl",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "results_vidtitle",
                    models.CharField(
                        blank=True,
                        db_column="results_vidTitle",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "results_viddesc",
                    models.TextField(
                        blank=True, db_column="results_vidDesc", null=True
                    ),
                ),
                (
                    "results_vidduration",
                    models.CharField(
                        blank=True,
                        db_column="results_vidDuration",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "results_vidviewcnt",
                    models.CharField(
                        blank=True,
                        db_column="results_vidViewcnt",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "results_viddt",
                    models.CharField(
                        blank=True, db_column="results_vidDt", max_length=255, null=True
                    ),
                ),
            ],
            options={
                "db_table": "Video_Rankings",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Videos",
            fields=[
                (
                    "vid_id",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("vid_title", models.CharField(blank=True, max_length=255, null=True)),
                ("vid_view_cnt", models.IntegerField(blank=True, null=True)),
                ("vid_like_cnt", models.IntegerField(blank=True, null=True)),
                ("vid_comment_cnt", models.IntegerField(blank=True, null=True)),
                ("vid_url", models.CharField(blank=True, max_length=255, null=True)),
                ("vid_desc", models.TextField(blank=True, null=True)),
                (
                    "vid_duration",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("vid_published_at", models.TextField(blank=True, null=True)),
                (
                    "vid_thumbnail",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "Videos",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Videostats",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("vid_id", models.CharField(max_length=255)),
                ("date", models.CharField(blank=True, max_length=255, null=True)),
                ("vid_title", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "vid_view_cnt",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "vid_like_cnt",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "vid_comment_cnt",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("category", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "VideoStats",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", core.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name="ScanTable",
            fields=[
                (
                    "scan_id",
                    models.CharField(
                        default=uuid.uuid4,
                        editable=False,
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "scan_date_time",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "scan_channel",
                    models.CharField(
                        blank=True, default=None, max_length=255, null=True
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Channels",
            fields=[
                (
                    "scan",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="core.scantable",
                    ),
                ),
                ("channel_id", models.CharField(max_length=255)),
                (
                    "channel_title",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("channel_description", models.TextField(blank=True, null=True)),
                ("total_videos_count", models.IntegerField(blank=True, null=True)),
                ("total_views_count", models.IntegerField(blank=True, null=True)),
                ("total_subs_count", models.IntegerField(blank=True, null=True)),
                ("partial_likes_count", models.IntegerField(blank=True, null=True)),
                ("partial_comments_count", models.IntegerField(blank=True, null=True)),
                ("partial_views_count", models.IntegerField(blank=True, null=True)),
                (
                    "channel_created_date",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("channel_logo_url", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "Channels",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="EmojiFrequency",
            fields=[
                (
                    "vid",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="core.videos",
                    ),
                ),
                ("highlvl_freq", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "Emoji_Frequency",
                "managed": False,
            },
        ),
    ]
